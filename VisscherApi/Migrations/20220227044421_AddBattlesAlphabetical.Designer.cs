// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisscherApi.Models;

#nullable disable

namespace VisscherApi.Migrations
{
    [DbContext(typeof(VisscherApiContext))]
    [Migration("20220227044421_AddBattlesAlphabetical")]
    partial class AddBattlesAlphabetical
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VisscherApi.Models.BattlesAlphabetical", b =>
                {
                    b.Property<int>("WikiListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("WikiListId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BattlesAlphabetical");

                    b.HasData(
                        new
                        {
                            WikiListId = 1,
                            CategoryId = 1,
                            LastChecked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://en.wikipedia.org/wiki/List_of_battles_(alphabetical)"
                        });
                });

            modelBuilder.Entity("VisscherApi.Models.BattlesByDate", b =>
                {
                    b.Property<int>("WikiListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BattlesByDateId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("WikiListId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BattlesByDateList");
                });

            modelBuilder.Entity("VisscherApi.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("VisscherApi.Models.MappableEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Latitude")
                        .HasColumnType("float");

                    b.Property<float>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MappableEvent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MappableEvent");
                });

            modelBuilder.Entity("VisscherApi.Models.Battle", b =>
                {
                    b.HasBaseType("VisscherApi.Models.MappableEvent");

                    b.HasDiscriminator().HasValue("Battle");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1,
                            LastChecked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 0f,
                            Longitude = 0f,
                            Name = "Battle of Ad Decimum",
                            Url = "https://en.wikipedia.org/wiki/Battle_of_Ad_Decimum",
                            Year = 0
                        });
                });

            modelBuilder.Entity("VisscherApi.Models.BattlesAlphabetical", b =>
                {
                    b.HasOne("VisscherApi.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VisscherApi.Models.BattlesByDate", b =>
                {
                    b.HasOne("VisscherApi.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VisscherApi.Models.MappableEvent", b =>
                {
                    b.HasOne("VisscherApi.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VisscherApi.Models.Category", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
